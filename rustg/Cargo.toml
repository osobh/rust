[workspace]
members = [
    ".",
    "gpu-test-harness",
    "gpu-runtime-primitives",
    "gpu-core-libs",
    "gpu-storage",
    "gpu-networking",
    "gpu-data-engines",
    "gpu-abstraction-layer",
    "gpu-dev-tools"
]
resolver = "2"

[package]
name = "rustg"
version = "0.3.0"
edition = "2021"
authors = ["rustg developers"]
description = "Universal GPU-accelerated Rust development environment supporting NVIDIA, AMD, Apple, Intel, and TPU"
license = "MIT OR Apache-2.0"

repository = "https://github.com/rustg/rustg"
keywords = ["compiler", "gpu", "universal", "rust", "parallel"]
categories = ["development-tools", "compilers", "hardware-support"]

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(blackwell_gpu)'] }

[lib]
name = "rustg"
path = "src/lib.rs"

[[bin]]
name = "rustg"
path = "src/main.rs"

[[bin]]
name = "cargo-g"
path = "src/bin/cargo-g.rs"

[[bin]]
name = "clippy-f"
path = "src/bin/clippy-f.rs"

[[bin]]
name = "rustfmt-g"
path = "src/bin/rustfmt-g.rs"

[[bin]]
name = "rustdoc-g"
path = "src/bin/rustdoc-g.rs"

[[bin]]
name = "rustup-g"
path = "src/bin/rustup-g.rs"

[[bin]]
name = "rust-analyzer-g"
path = "src/bin/rust-analyzer-g.rs"

[[bin]]
name = "rust-gdb-g"
path = "src/bin/rust-gdb-g.rs"

[[bin]]
name = "bindgen-g"
path = "src/bin/bindgen-g.rs"

[[bin]]
name = "miri-g"
path = "src/bin/miri-g.rs"

[[bench]]
name = "tokenizer_bench"
harness = false

[dependencies]
# Core dependencies
anyhow = "1.0"
thiserror = "1.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }

# FFI and CUDA interop
libc = "0.2"
cuda-sys = "0.2"
cxx = "1.0"

# Memory management
memmap2 = "0.9"
parking_lot = "0.12"

# Data structures
rustc-hash = "1.1"
indexmap = "2.0"
smallvec = "1.11"
bumpalo = "3.14"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
bincode = "1.3"
toml = "0.8"

# Time handling
chrono = { version = "0.4", features = ["serde"] }

# Command line interface
clap = { version = "4.4", features = ["derive"] }
indicatif = "0.17"
colored = "2.0"

# Universal GPU abstraction layer
gpu-abstraction-layer = { path = "gpu-abstraction-layer" }

tempfile = "3.8"

# Testing and benchmarking
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.4"
pretty_assertions = "1.4"

[dev-dependencies]
tempfile = "3.8"
insta = "1.34"
rstest = "0.18"

[build-dependencies]
cc = "1.0"
cmake = "0.1"
bindgen = "0.69"
cxx-build = "1.0"
num_cpus = "1.16"

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.bench]
inherits = "release"

[profile.dev]
opt-level = 0
debug = true

[profile.test]
opt-level = 2
debug = true

# Workspace already defined at top of file

[features]
# Default safe configuration - CUDA for maximum compatibility
default = ["cuda"]

# Automatic backend detection and selection
auto-detect = ["gpu-abstraction-layer/auto-detect"]

# Individual GPU backends
cuda = ["gpu-abstraction-layer/cuda"]
rocm = ["gpu-abstraction-layer/rocm"] 
metal = ["gpu-abstraction-layer/metal"]
oneapi = ["gpu-abstraction-layer/oneapi"]
tpu = ["gpu-abstraction-layer/tpu"]

# Common backend combinations
desktop-gpus = ["cuda", "rocm", "oneapi"]      # NVIDIA, AMD, Intel discrete GPUs
apple-silicon = ["metal"]                      # Apple M1/M2/M3/M4 GPUs
mobile-gpus = ["metal", "oneapi"]             # Mobile and integrated GPUs
ml-accelerators = ["cuda", "tpu"]             # Machine learning focused
scientific-computing = ["cuda", "rocm"]       # HPC and scientific workloads

# All backends for comprehensive testing
all-backends = ["cuda", "rocm", "metal", "oneapi", "tpu"]

# Multi-GPU orchestration features
orchestration = ["gpu-abstraction-layer/orchestration"]
load-balancing = ["orchestration", "gpu-abstraction-layer/load-balancing"]
failover = ["orchestration", "gpu-abstraction-layer/failover"]
performance-monitoring = ["orchestration", "gpu-abstraction-layer/performance-monitoring"]

# Development and optimization features
profiling = ["gpu-abstraction-layer/profiling"]
debug-gpu = ["gpu-abstraction-layer/debug-kernels"]
cpu-fallback = ["gpu-abstraction-layer/cpu-fallback"]
fast-math = ["gpu-abstraction-layer/fast-math"]

# Target-specific optimizations
rtx-5090 = ["cuda", "gpu-abstraction-layer/rtx-5090"]
rx-7900xtx = ["rocm", "gpu-abstraction-layer/rx-7900xtx"] 
m3-max = ["metal", "gpu-abstraction-layer/m3-max"]

# Environment-specific builds
development = ["profiling", "debug-gpu", "performance-monitoring"]
production = ["all-backends", "fast-math", "cpu-fallback"]
ci = ["all-backends", "orchestration"]